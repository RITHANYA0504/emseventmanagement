import { Component, OnInit } from '@angular/core';
import { Router, NavigationEnd } from '@angular/router';
import { NotificationService } from 'src/app/services/notification.service';
import { Notification } from 'src/app/model/Notification';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-home-navbar',
  templateUrl: './home-navbar.component.html',
  styleUrls: ['./home-navbar.component.css']
})
export class HomeNavbarComponent implements OnInit {
  searchEvent: string = '';
  searchLocation: string = '';
  notificationCount: number = 0;
  userId: string = 'zHV28';
  notifications: Notification[] = [];

  constructor(private notificationService: NotificationService, private router: Router) {}

  ngOnInit(): void {
    this.loadNotifications();

    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe((event: NavigationEnd) => {
      // Optional: only reload if returned to home
      if (event.url === '/' || event.urlAfterRedirects === '/') {
        this.loadNotifications();
      }
    });
  }

  loadNotifications(): void {
    this.notificationService.getNotificationById(this.userId).subscribe({
      next: (data: Notification[]) => {
        this.notifications = data;
        this.notificationCount = data.filter(n => !n.isRead).length;
      },
      error: (err) => console.error('Error fetching notifications:', err)
    });
  }

  openNotifications(): void {
    this.router.navigate(['/notification']);
  }

  logout(): void {
    console.log('Logging out...');
  }
}






import { Component, OnInit } from '@angular/core';
import { NotificationService } from 'src/app/services/notification.service';
import { Notification } from 'src/app/model/Notification';
import { NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-notification',
  templateUrl: './notification.component.html',
  styleUrls: ['./notification.component.css']
})
export class NotificationComponent implements OnInit {
  notifications: Notification[] = [];
  userId: string = 'zHV28';

  constructor(private notificationService: NotificationService,private router: Router) {}

  ngOnInit(): void {
    this.loadNotifications();

     this.router.events.pipe(
          filter(event => event instanceof NavigationEnd)
        ).subscribe(()=>{
          this.loadNotifications();
        });
  }

  loadNotifications(): void {
    this.notificationService.getNotificationById(this.userId).subscribe({
      next: (data: Notification[]) => {
        this.notifications = data;
      },
      error: (err) => console.error('Error loading notifications:', err)
    });
  }

  markAsRead(notification: Notification): void {
    console.log(notification);
    if (!notification.isRead) {
      this.notificationService.markAsRead(notification.notificationId).subscribe({
        next: () => {
          notification.isRead = true;
        },
        error: (err) => console.error('Error marking as read:', err)
      });
    }
  }

  Back()
  {
    this.router.navigate(['/']);

  }
}

import { Component, OnInit } from '@angular/core';
import { NavigationEnd, Router } from '@angular/router';
import { NotificationService } from 'src/app/services/notification.service';
import { Notification } from 'src/app/model/Notification';
import { filter } from 'rxjs/operators';

@Component({
  selector: 'app-home-navbar',
  templateUrl: './home-navbar.component.html',
  styleUrls: ['./home-navbar.component.css']
})
export class HomeNavbarComponent implements OnInit {
  searchEvent: string = '';
  searchLocation: string = '';
  notificationCount: number = 0;
  userId: string = 'zHV28';
  notifications: Notification[] = [];

  constructor(private notificationService: NotificationService, private router: Router) {}

  ngOnInit(): void {
    this.loadNotifications();

    this.router.events.pipe(
      filter(event => event instanceof NavigationEnd)
    ).subscribe(()=>{
      this.loadNotifications();
    });
  }

  loadNotifications(): void {
    this.notificationService.getNotificationById(this.userId).subscribe({
      next: (data: Notification[]) => {
        this.notifications = data;
        this.notificationCount = data.filter(n => !n.isRead).length;
      },
      error: (err) => console.error('Error fetching notifications:', err)
    });
  }

  openNotifications(): void {
    this.router.navigate(['/notification']);
  }

  logout(): void {
    console.log('Logging out...');
  }
}
